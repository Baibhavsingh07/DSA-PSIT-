#include<iostream>                  //Linked List Implementation Using C++
using namespace std;

class node{
	public:
		int data;
		node* next;
	
	node(int val){
		data=val;
		next=NULL;
	}
};

void insertAtTail(node* &head,int val)
{
	node* n=new node(val);
	
	if(head==NULL)
	{
		head=n;
		return;
	}
	
	node* temp=head;
	while(temp->next!=NULL)
	{
		temp=temp->next;
	}
	temp->next=n;
}

void insertAtHead(node* &head,int val)
{
	node *n= new node(val);
	n->next=head;
	head=n;
}

void display(node* head)
{
	node * temp=head;
	while(temp!=NULL)
	{
		cout<<temp->data<<"->";
		temp=temp->next;
	}
	cout<<"NULL"<<endl;
}

int search(node * head,int key)
{
	node* temp=head;
	while(temp->next!=NULL)
	{
		if(temp->data==key)
		{
			return 1;
		}
		temp=temp->next;
	}
	return 0;
}

void deleteAtHead(node * &head)
{
	node* todel=head;
	head=head->next;
	delete todel;
}

void deletion(node* &head,int val)
{
	node * temp=head;
	
	if(head==NULL)
	{
		return ;
	}
	if(head->next==NULL)
	{
		deleteAtHead(head);
		return;
	}
	
	while(temp->next->data!=val)
	{
		temp=temp->next;
	}
	node * todel=temp->next;
	temp->next=temp->next->next;
	delete todel;
	return;

}

node* reverse(node* &head)
{
	node* currptr=head;
	node* prevptr=NULL;
	node* nextptr;
	while(currptr!=NULL)
	{
		nextptr=currptr->next;
		currptr->next=prevptr;
		
		prevptr=currptr;
		
		currptr=nextptr;
	}
	return prevptr;
	
}



main()
{
	node* head =NULL;
	insertAtTail(head,1);
	insertAtTail(head,2);
	insertAtTail(head,3);
	display(head);
	insertAtHead(head,4);
	display(head);
	cout<<search(head,2)<<endl;
	deletion(head,2);
	display(head);
	//deleteAtHead(head);
	//display(head);
	
	node* newhead=reverse(head);
	display(newhead);
	
	return 0;
}
